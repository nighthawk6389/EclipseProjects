import java.util.ArrayList;
import java.util.HashMap;

/**
 * This is a node of the system
 */


public class Node {

	protected int id; // shouldn't be modified once initialized
	protected ArrayList<Integer> N = new ArrayList<Integer>();
	
	/*---------------------
	/*------STUDENTS-------
	/*-don't change those--
	/*-----5 functions-----
	/*-------------------*/
	
	
	public Node(int id) {
		super();
		this.id = id;
	}

	public int getId() {
		return id;
	}

	public void addBaseN(int id) {
		N.add(id);
	}

	public void removeBaseN(int id) {
		for(int k = 0 ; k < N.size() ; k ++ ) 
			if (N.get(k) == id ) N.remove(k) ;
	}

	public boolean hasBaseN( int id){
		for(int k = 0 ; k < N.size() ; k ++ ) 
			if (N.get(k) == id ) return true;
		return false;
	}

	/*----------------------
	/*------STUDENTS--------
	/*-your code goes after-
	/*--------------------*/
	public static int LARGE_VALUE = 1000000;
	private ArrayList<Neighbor> neighbors = new ArrayList<Neighbor>();
	private ArrayList<SDCost> costToEveryNode = new ArrayList <SDCost> ();
	boolean changesMade = false;


	/**
	 * Add a neighbor to the node and sets the cost to reach it
	 * @param id
	 * @param cost
	 */
	public void addNeighbor(int id, int cost){
		//Create new Neighbor object and place the cost between these two nodes in the object
		Neighbor neighbor = new Neighbor(id,cost);
		ArrayList<SDCost> neighborCosts = neighbor.getCostsToEveryNode();
		neighborCosts.add(new SDCost(this.id, id, cost));
		neighborCosts.add(new SDCost(id, id, 0));

		
		neighbors.add(neighbor); 
		costToEveryNode.add(new SDCost(this.id, id, cost));
		
		changesMade = true;
		
		System.out.println("Added Node " + id + " to Node " + this.id + ". Node  " + this.id + " now has " + costToEveryNode);
		return;
		
	}
	
	
	
	/**
	 * Remove the neighbor with the id id
	 * @param id
	 */
	public void removeNeighbor(int id){
		Neighbor toRemove = null;
		for(Neighbor n : neighbors){
			if( n.getId() == id){
				toRemove = n;
				break;
			}
		}
		
		SDCost sdToRemove = null;
		for(SDCost sdNode : costToEveryNode){
			if( sdNode.getDestination() == id){
				sdToRemove = sdNode;
				break;
			}
		}
		if( toRemove == null){
			System.out.println("FAIL: Attempted to remove Node " + id + " from Node " + this.id + ". " + this.neighbors);
			return;
		}
		if( sdToRemove == null){
			System.out.println("FAILSD: Attempted to remove SDNode " + id + " from Node " + this.id + ". " + costToEveryNode);
			return;
		}
		
		System.out.println("Remove Node("+id+") " + toRemove.getId() +" from Node " + this.id + "");
		neighbors.remove(toRemove);
		costToEveryNode.remove(sdToRemove);
		System.out.println( "Node " + this.id + " now has " + costToEveryNode);
		
		changesMade = true;
		
		//Re-evaluate costs to all neighbors
		//for(Neighbor n : neighbors){
		//	this.reEvaluteCostToNeighbors(n.getId());
		//}

		return;
	}
	


	/**
	 * Changes the cost to reach the neighbor with the id id
	 * @param id
	 * @param cost
	 */
	public void changeCost(int id, int cost){
		
		//Set cost in ArrayList kept of costs to nodes
		this.setCostToNode(id, cost);
		
		//Set cost of DirectCost in Neighbor object 
		for(Neighbor n: neighbors){
			if( n.getId() == id ){
				n.setDirectCost(cost);
				break;
			}
		}
		System.out.println("Changed cost of  Node [" + this.id + "->" + id +"] to "+ cost + ". " + costToEveryNode);
		
		this.resetNeighborCosts();
		//Re-evaluate costs to all nodes
		this.reEvaluteCostToAllNodes();
		
		return;
	}
	

	/**
	 * Return the list of messages a node wants to send in 
	 * a given turn
	 * @return
	 */
	public ArrayList<Message> turn(){
		
		if( !changesMade ){
			new ArrayList<Message>();
		}
		changesMade = false;
		
		
		ArrayList<Message> messagesToSend = new ArrayList<Message>();
		
		for(Neighbor n : neighbors){
			//Create message depending on poison reverse
			String messageString = this.id + " " + this.id + ":0" + " ";
			for( SDCost node : costToEveryNode){
				
				int destID = node.getDestination();
				int destCost = node.getCost();
				//Check for poinsonReverse usage
				if( n.isUsedForAccessTo(destID) ){
					destCost = Integer.MAX_VALUE;
					System.out.println("POISON REVERSE: Node " + n.getId() + " is used to acces Node " + destID + " for Node " +id);
				}
				messageString +=  destID + ":" + destCost + " ";
			}
			System.out.println("turn(): Message from Node " + this.id + " is -- " + messageString);
			
			//Create message and add to messageToSend Array
			Message message = new Message( n.getId() , messageString );
			messagesToSend.add(message);
			System.out.println("Sending Message from Node " + this.id + " to Node " + n.getId());
		}
		
		return messagesToSend;
	}


	
	/**
	 * Called when a message is received by the node
	 * @param m
	 */
	public void ReceiveMessage(Message m){
		System.out.println("Received message at Node " + this.id + ". Message: " + m.getText());
				
		//Do BellmanFord
		String messageString = m.getText();
		String [] messageArray = messageString.split(" ");
		
		int from = Integer.parseInt(messageArray[0]);
		int costToMessageSender = this.getCostToNode(from);
		
		Neighbor neighbor = null;
		for(Neighbor n: neighbors){
			if( n.getId() == from){
				neighbor = n;
				break;
			}
		}
		ArrayList<SDCost> neighborsCosts = neighbor.getCostsToEveryNode();
		neighborsCosts.clear();
		
		for(String nodeDistance : messageArray){
			String [] nodeDistanceArray = nodeDistance.split(":");
			if(nodeDistanceArray == null || nodeDistanceArray.length == 1){
				continue;
			}
			
			//Check if costFromNeighbor + costToNeighbor < currentCost to node
			int node = Integer.parseInt( nodeDistanceArray[0] );
			int costToNode = Integer.parseInt( nodeDistanceArray[1] );
			//if( costToMessageSender + costToNode < this.getCostToNode(node) ){
			//	this.setCostToNode(node, costToMessageSender + costToNode);
			//}
			
			//Insert updated value of Neighbors costs into map
			neighborsCosts.add(new SDCost(from, node, costToNode));
		}
		
		//Re-evaluate costs to all nodes
		this.reEvaluteCostToAllNodes();
		
		
		//System.out.println("After RECIEVEMESSAGE, CostArray: " + costToEveryNode);
		return ;
	}


	
	/**
	 * Return the output after the algorithm
	 * @return
	 */
	public ArrayList<Entry> sendOutput(){
		ArrayList<Entry> out = new ArrayList<Entry>();
		out.add(new Entry(3,19));
		return out;
	}
	
	private void reEvaluteCostToAllNodes(){
		System.out.println("\nIn Re-Evaulate for Node: " + this.id);
		for(SDCost node : costToEveryNode){
			int nodeCheckingID = node.getDestination();
			System.out.println("Checking: " + nodeCheckingID);
			int newCostToNodeID = LARGE_VALUE;
			int throughNodeID = -1;
			//Iterate through neighbors and find shortest path to node
			for(Neighbor n : neighbors){
				System.out.println("Checking Neighbor: " + n.getId());
				if( n.getId() == nodeCheckingID ) //Dont check neighbor distance to itself
					continue;
				int directCostToNeighbor = n.getDirectCost();
				ArrayList<SDCost> nCosts = n.getCostsToEveryNode();
				System.out.println(n.getId() + "'s Costs: " + nCosts);
				for(SDCost neighborNode: nCosts){
					if( neighborNode.getDestination() == nodeCheckingID){
						//System.out.println("In Node....");
						int nodeCost = neighborNode.getCost();
						int newCost = nodeCost + directCostToNeighbor;
						System.out.println("New Cost: " + newCost + ". CTON: " + newCostToNodeID);
						if( newCost < newCostToNodeID){
							newCostToNodeID = newCost;
							throughNodeID = n.getId();
						}
					}//end if NeighborNode
				}// end for SDCost
			} // end For(Neighbor)
		
			if( this.getCostToNode(nodeCheckingID) != newCostToNodeID){
				System.out.println("Changing cost of [" + this.id + " " + nodeCheckingID + "] from " + this.getCostToNode(nodeCheckingID) + " to " + newCostToNodeID + " through " + throughNodeID);
				this.setCostToNode(nodeCheckingID, newCostToNodeID);
				changesMade = true;
			}// end if
		}// end for SDCost costToEverynode

		System.out.println("After re-evaluting costs for Node " + this.id + " : " + this.costToEveryNode);
		
	}
	
	private void resetNeighborCosts(){
		//Cycle through all neighbors and replace calculated costs
		// with direct costs
		for(Neighbor n : neighbors){
			for(SDCost cost : costToEveryNode){
				if( cost.getDestination() == n.getId()){
					//if Neighbor found in costToEveryNode list
					cost.setCost(n.getDirectCost());
				}
			}
		}
	}//end resetNeighborscosts
	
	private SDCost getSDCostFromID( int nodeID ){
		for(SDCost node : costToEveryNode){
			if( node.getDestination() == nodeID){
				return node;
			}
		}
		return null;
	}
	
	private int getCostToNode(int nodeID){
		if( nodeID == this.id )
			return 0;
		
		SDCost node = this.getSDCostFromID(nodeID);
		if( node != null )
			return node.getCost();
		
		// New Node that neighbor introduced
		return LARGE_VALUE;
	}
	
	private void setCostToNode(int nodeID, int cost){
		SDCost node = this.getSDCostFromID(nodeID);
		if( node != null){
			node.setCost(cost);
			return;
		}
		//A New node was found
		node = new SDCost(this.id, nodeID, cost);
		costToEveryNode.add(node);
		
	}
	
}
